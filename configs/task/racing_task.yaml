# Racing task configuration

# @package _global_
task:
  name: "drone_racing"
  category: "racing"
  
  # Task description for LLM
  description: >
    Race drone through gates as quickly as possible while maintaining control.
    
    The drone must:
    1. Pass through racing gates in sequence
    2. Maintain high speed while avoiding crashes
    3. Navigate tight turns and elevation changes
    4. Complete the course within time limit
    5. Minimize total race time
    
    Reward function should:
    - Reward gate passage with time bonuses
    - Penalize crashes and course deviations
    - Balance speed vs. control trade-offs
    - Encourage smooth racing lines
    - Provide progress-based shaping rewards

  # Training configuration
  training:
    algorithm: "${optimization.algorithm}"
    steps_per_evaluation: 20000  # Longer training for complex racing
    evaluation_episodes: 15
    success_threshold: 0.7       # Racing is harder than navigation
    
  # Reward function constraints
  reward_constraints:
    max_components: 10           # More complex reward for racing
    numerical_stability: true
    differentiable: true
    
  # Evaluation metrics
  metrics:
    primary: "completion_rate"   # Primary: completing the race
    secondary: 
      - "race_time"
      - "gates_passed"
      - "crash_rate"
      - "speed_consistency"